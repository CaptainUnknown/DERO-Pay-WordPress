

/*   <-------
  console.info('Bridging...');

    const deroBridgeApiRef = React.useRef();
    const [bridgeInitText, setBridgeInitText] = React.useState('');
  
    React.useEffect(() => {
      const load = async () => {
        deroBridgeApiRef.current = new DeroBridgeApi();
        const deroBridgeApi = deroBridgeApiRef.current;
        const [err] = await to(deroBridgeApi.init());
        if (err) {
          setBridgeInitText('Failed to connect to the Extension ❌');
        } else {
          setBridgeInitText('Connected to the Extension ✅');
        }
      }
  
      window.addEventListener('load', load);
      return () => window.removeEventListener('load', load);
    }, []);

    const getWalletBalance = React.useCallback(async () => {
        const deroBridgeApi = deroBridgeApiRef.current;
        const [err, res] = await to(deroBridgeApi.wallet('get-balance'));
        if (err) 
          alert(err.message);
        else{
          alert('Wallet Balance 📇: ' + res.data.result.balance / 100000 + ' DERO');
        }
    }, []);

    const getWalletTokenBalance = React.useCallback(async () => {
        const deroBridgeApi = deroBridgeApiRef.current;
        const [err, res] = await to(deroBridgeApi.wallet('get-balance', { SCID: props.TSCID }));
        if (err)
            alert(err.message);
        else
            alert('Wallet Token Balance 🪙: ' + res.result.balance / 100000 + ' Tokens');
    }, []);

    const transfer = React.useCallback(async () => {
        console.log(DEROPrice);
        if(attributes.isDirectTransfer == 'on'){
            const deroBridgeApi = deroBridgeApiRef.current;
            const [err, res] = await to(deroBridgeApi.wallet('start-transfer', { //Direct Transfer
                transfers: [{
                    destination: attributes.destinationWalletAddress,
                    amount: DEROPrice,
                    burn: 0,
                }]
            }))
            .then(res => {
                if(res[1].data.result.txid != ''){
                    completePurchase(attributes.courseID, attributes.user_id)
                    .then(response => {
                        console.log(response);
                    });
                    alert('Purchase Completed ✅');
                    setTimeout(() => {
                        console.log('Refreshing...');
                        window.location.reload();
                    }, 3000);
                }
            })
            .catch(err => {
                console.log(err);
                alert('Transact Failed 🌐, Check Console for more details.');
            });
        }
        else if (!isCustom && attributes.isDirectTransfer == 'off'){
            const deroBridgeApi = deroBridgeApiRef.current;
            const [err, res] = await to(deroBridgeApi.wallet('start-transfer', { // DERO SCID Transfer
              scid: attributes.DSCID,
              destination: attributes.destinationWalletAddress,
              amount: DEROPrice,
            }))
            .then(res => {
                console.log(res);
                console.log(res[1].data.result.txid);
                console.log(res[1].data.result.txid != '');
                if(res[1].data.result.txid != ''){
                    completePurchase(attributes.courseID, attributes.user_id)
                    .then(response => {
                        console.log(response);
                    });
                    alert('Purchase Completed ✅');
                    setTimeout(() => {
                        console.log('Refreshing...');
                        window.location.reload();
                    }, 3000);
                }
            })
            .catch(err => {
                console.log(err);
                alert('Transact Failed 🌐, Check Console for more details.');
            });
}
else if (isCustom && attributes.isDirectTransfer == 'off'){
   const deroBridgeApi = deroBridgeApiRef.current;
   const [err, res] = await to(deroBridgeApi.wallet('start-transfer', { //Token Custom Smart Contract
     scid: attributes.TSCID,
     destination: attributes.destinationWalletAddress,
     amount: attributes.tokenAmount,
   }))
   .then(res => {
       console.log(res);
       console.log(res[1].data.result.txid);
       console.log(res[1].data.result.txid != '');
       if(res[1].data.result.txid != ''){
           completePurchase(attributes.courseID, attributes.user_id)
           .then(response => {
               console.log(response);
           });
           alert('Purchase Completed ✅');
           setTimeout(() => {
               console.log('Refreshing...');
               window.location.reload();
           }, 3000);
       }
   })
   .catch(err => {
       console.log(err);
       alert('Transact Failed 🌐, Check Console for more details.');
   });
}
}, []);
*/